// Script de prueba para el flujo de suscripci√≥n
// Ejecutar con: node test-subscription-flow.js

const testSubscriptionFlow = async () => {
  console.log('üß™ Iniciando prueba del flujo de suscripci√≥n...');
  
  // Datos de prueba
  const testData = {
    external_reference: 'TEST_' + Date.now(),
    preapproval_id: 'TEST_PREAPPROVAL_' + Date.now()
  };
  
  try {
    console.log('üì§ Enviando solicitud de activaci√≥n...');
    console.log('Datos de prueba:', testData);
    
    const response = await fetch('http://localhost:3000/api/subscriptions/activate-landing', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    const result = await response.json();
    
    console.log('üì• Respuesta del servidor:');
    console.log('Status:', response.status);
    console.log('Resultado:', JSON.stringify(result, null, 2));
    
    if (response.ok) {
      console.log('‚úÖ Endpoint funcionando correctamente');
      
      if (result.success) {
        console.log('üéâ Suscripci√≥n activada exitosamente');
        console.log('üìß Correos enviados:', result.emailsSent ? 'S√≠' : 'No');
      } else {
        console.log('‚ö†Ô∏è Activaci√≥n fall√≥:', result.error);
      }
    } else {
      console.log('‚ùå Error en el endpoint:', response.status);
    }
    
  } catch (error) {
    console.error('üí• Error en la prueba:', error.message);
  }
  
  console.log('\nüîç Prueba de validaci√≥n de par√°metros...');
  
  // Prueba sin par√°metros
  try {
    const response = await fetch('http://localhost:3000/api/subscriptions/activate-landing', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({})
    });
    
    const result = await response.json();
    console.log('Sin par√°metros - Status:', response.status);
    console.log('Sin par√°metros - Resultado:', result.error || result.message);
    
  } catch (error) {
    console.error('Error en prueba sin par√°metros:', error.message);
  }
  
  console.log('\n‚ú® Pruebas completadas');
};

// Verificar que el servidor est√© corriendo
const checkServer = async () => {
  try {
    const response = await fetch('http://localhost:3000');
    if (response.ok) {
      console.log('üöÄ Servidor detectado en http://localhost:3000');
      await testSubscriptionFlow();
    } else {
      console.log('‚ùå Servidor no responde correctamente');
    }
  } catch (error) {
    console.log('‚ùå No se puede conectar al servidor. Aseg√∫rate de que est√© corriendo con "npm run dev"');
    console.log('Error:', error.message);
  }
};

// Ejecutar pruebas
checkServer();