require('dotenv').config()
const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables de entorno de Supabase no configuradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function debugExternalReferenceMismatch() {
  console.log('üîç === AN√ÅLISIS DE DESAJUSTE EN EXTERNAL_REFERENCE ===\n')
  
  try {
    // 1. Obtener todas las suscripciones pendientes
    console.log('1Ô∏è‚É£ Analizando suscripciones pendientes...')
    const { data: pendingSubscriptions, error: pendingError } = await supabase
      .from('unified_subscriptions')
      .select('id, external_reference, user_id, product_id, status, created_at, metadata')
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (pendingError) {
      console.error('‚ùå Error obteniendo suscripciones pendientes:', pendingError.message)
      return
    }
    
    console.log(`üìä Suscripciones pendientes encontradas: ${pendingSubscriptions?.length || 0}`)
    
    if (pendingSubscriptions && pendingSubscriptions.length > 0) {
      console.log('\nüìã An√°lisis de formatos de external_reference:')
      
      pendingSubscriptions.forEach((sub, index) => {
        console.log(`\n   ${index + 1}. ID: ${sub.id}`)
        console.log(`      External Reference: ${sub.external_reference}`)
        console.log(`      User ID: ${sub.user_id}`)
        console.log(`      Product ID: ${sub.product_id}`)
        console.log(`      Creado: ${new Date(sub.created_at).toLocaleString()}`)
        
        // Analizar formato
        const ref = sub.external_reference
        if (ref) {
          const parts = ref.split('-')
          console.log(`      Partes del reference: ${parts.length} partes`)
          console.log(`      Formato: ${parts.join(' | ')}`)
          
          // Verificar si sigue el formato esperado SUB-{userId}-{planId}-{hash8}
          const expectedPattern = /^SUB-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}-\w+-[a-f0-9]{8}$/i
          const isValidFormat = expectedPattern.test(ref)
          console.log(`      ‚úÖ Formato v√°lido: ${isValidFormat ? 'S√ç' : 'NO'}`)
          
          if (!isValidFormat) {
            console.log(`      ‚ö†Ô∏è  PROBLEMA: Formato no coincide con patr√≥n esperado`)
            
            // Intentar identificar el problema
            if (!ref.startsWith('SUB-')) {
              console.log(`      üîç No comienza con 'SUB-'`)
            } else if (parts.length < 4) {
              console.log(`      üîç Muy pocas partes (${parts.length}, esperadas: m√≠nimo 4)`)
            } else {
              const userId = parts.slice(1, 6).join('-')
              const planId = parts.slice(6, -1).join('-')
              const hash = parts[parts.length - 1]
              
              console.log(`      üîç User ID extra√≠do: ${userId}`)
              console.log(`      üîç Plan ID extra√≠do: ${planId}`)
              console.log(`      üîç Hash extra√≠do: ${hash} (longitud: ${hash?.length})`)
              
              if (hash?.length !== 8) {
                console.log(`      ‚ùå Hash incorrecto (esperado: 8 caracteres)`)
              }
            }
          }
        } else {
          console.log(`      ‚ùå External reference es NULL`)
        }
      })
    }
    
    // 2. Obtener logs de webhook recientes
    console.log('\n\n2Ô∏è‚É£ Analizando logs de webhook recientes...')
    const { data: webhookLogs, error: webhookError } = await supabase
      .from('webhook_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (webhookError) {
      console.error('‚ùå Error obteniendo logs de webhook:', webhookError.message)
    } else if (webhookLogs && webhookLogs.length > 0) {
      console.log(`üìä Logs de webhook encontrados: ${webhookLogs.length}`)
      
      webhookLogs.forEach((log, index) => {
        console.log(`\n   ${index + 1}. Webhook ID: ${log.id}`)
        console.log(`      Tipo: ${log.webhook_type || 'N/A'}`)
        console.log(`      Estado: ${log.status}`)
        console.log(`      Fecha: ${new Date(log.created_at).toLocaleString()}`)
        
        if (log.webhook_data) {
          try {
            const webhookData = typeof log.webhook_data === 'string' 
              ? JSON.parse(log.webhook_data) 
              : log.webhook_data
            
            if (webhookData.external_reference) {
              console.log(`      External Reference del webhook: ${webhookData.external_reference}`)
              
              // Verificar si este external_reference existe en la BD
              console.log(`      üîç Buscando en BD...`)
            }
          } catch (e) {
            console.log(`      ‚ö†Ô∏è Error parseando webhook_data`)
          }
        }
        
        if (log.error_message) {
          console.log(`      ‚ùå Error: ${log.error_message}`)
        }
      })
    }
    
    // 3. Simular b√∫squeda de webhook
    console.log('\n\n3Ô∏è‚É£ Simulando b√∫squeda de webhook...')
    
    if (pendingSubscriptions && pendingSubscriptions.length > 0) {
      const testSub = pendingSubscriptions[0]
      const testRef = testSub.external_reference
      
      console.log(`üß™ Probando b√∫squeda con: ${testRef}`)
      
      // Simular b√∫squeda exacta como lo hace el webhook
      const { data: foundSub, error: searchError } = await supabase
        .from('unified_subscriptions')
        .select('*')
        .eq('external_reference', testRef)
        .single()
      
      if (searchError) {
        console.log(`‚ùå Error en b√∫squeda: ${searchError.message}`)
        console.log(`üîç C√≥digo de error: ${searchError.code}`)
      } else if (foundSub) {
        console.log(`‚úÖ Suscripci√≥n encontrada: ${foundSub.id}`)
        console.log(`   Estado: ${foundSub.status}`)
      } else {
        console.log(`‚ùå Suscripci√≥n NO encontrada`)
      }
    }
    
    // 4. Recomendaciones
    console.log('\n\nüéØ === DIAGN√ìSTICO Y RECOMENDACIONES ===')
    console.log('\nüìã Problemas identificados:')
    console.log('   1. M√∫ltiples formatos de external_reference en el sistema')
    console.log('   2. Webhooks buscan por external_reference exacto')
    console.log('   3. Si el formato no coincide, la suscripci√≥n no se encuentra')
    console.log('   4. Resultado: suscripciones quedan en estado "pending"')
    
    console.log('\nüîß Soluciones recomendadas:')
    console.log('   1. Estandarizar formato de external_reference en todo el sistema')
    console.log('   2. Implementar b√∫squeda robusta en webhooks (m√∫ltiples criterios)')
    console.log('   3. Agregar validaci√≥n de formato antes de crear suscripciones')
    console.log('   4. Implementar migraci√≥n para corregir referencias existentes')
    
  } catch (error) {
    console.error('‚ùå Error en an√°lisis:', error.message)
  }
}

// Ejecutar an√°lisis
debugExternalReferenceMismatch().then(() => {
  console.log('\n‚úÖ An√°lisis completado')
  process.exit(0)
}).catch(error => {
  console.error('‚ùå Error ejecutando an√°lisis:', error.message)
  process.exit(1)
})