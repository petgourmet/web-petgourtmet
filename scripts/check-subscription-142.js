/**
 * INVESTIGACI√ìN DE SUSCRIPCI√ìN ID 142
 * 
 * Analiza por qu√© la suscripci√≥n ID 142 no se activ√≥ autom√°ticamente
 * y est√° causando carga infinita en la p√°gina de suscripci√≥n.
 */

const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://kwhubfkvpvrlawpylopc.supabase.co'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aHViZmt2cHZybGF3cHlsb3BjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTkzOTU3MCwiZXhwIjoyMDYxNTE1NTcwfQ.3j4Gafz94NEixrTv55xAVmiemOKnIOdxsUBgqOvWGAI'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Datos de la suscripci√≥n problem√°tica
const SUBSCRIPTION_ID = 142
const EXTERNAL_REFERENCE = 'SUB-2f4ec8c0-0e58-486d-9c11-a652368f7c19-73-f4da54de'
const USER_ID = '2f4ec8c0-0e58-486d-9c11-a652368f7c19'
const USER_EMAIL = 'cristoferscalante@gmail.com'

async function investigateSubscription142() {
  console.log('üîç INVESTIGANDO SUSCRIPCI√ìN ID 142')
  console.log('================================================================================')
  console.log(`üìÖ Fecha: ${new Date().toLocaleString()}`)
  console.log(`üéØ Objetivo: Resolver problema de carga infinita`)
  console.log('================================================================================\n')

  try {
    // 1. Obtener detalles completos de la suscripci√≥n
    console.log('üìã PASO 1: Obteniendo detalles de la suscripci√≥n...')
    const { data: subscription, error: subError } = await supabase
      .from('unified_subscriptions')
      .select('*')
      .eq('id', SUBSCRIPTION_ID)
      .single()

    if (subError) {
      console.error('‚ùå Error obteniendo suscripci√≥n:', subError)
      return
    }

    console.log('‚úÖ Suscripci√≥n encontrada:')
    console.log(`   üìß Usuario: ${USER_EMAIL}`)
    console.log(`   üìù External Reference: ${subscription.external_reference}`)
    console.log(`   üìä Estado: ${subscription.status}`)
    console.log(`   üí∞ Monto: $${subscription.transaction_amount} ${subscription.currency_id}`)
    console.log(`   üìÖ Creada: ${subscription.created_at}`)
    console.log(`   üîÑ Actualizada: ${subscription.updated_at}`)
    console.log(`   üè∑Ô∏è MercadoPago ID: ${subscription.mercadopago_subscription_id || 'NO ASIGNADO'}`)
    console.log(`   üì¶ Producto: ${subscription.product_name} (${subscription.size})`)
    console.log(`   üîÅ Tipo: ${subscription.subscription_type}`)
    console.log('')

    // 2. Verificar webhooks relacionados
    console.log('üìã PASO 2: Verificando webhooks relacionados...')
    
    // Buscar en webhook_logs si existe
    const { data: webhooks, error: webhookError } = await supabase
      .from('webhook_logs')
      .select('*')
      .or(`external_reference.eq.${EXTERNAL_REFERENCE},subscription_id.eq.${SUBSCRIPTION_ID}`)
      .order('created_at', { ascending: false })
      .limit(10)

    if (webhookError && !webhookError.message.includes('does not exist')) {
      console.error('‚ùå Error verificando webhooks:', webhookError)
    } else if (webhooks && webhooks.length > 0) {
      console.log(`‚úÖ Encontrados ${webhooks.length} webhooks relacionados:`)
      webhooks.forEach((webhook, index) => {
        console.log(`   ${index + 1}. ${webhook.created_at} - ${webhook.event_type} - ${webhook.status}`)
      })
    } else {
      console.log('‚ö†Ô∏è No se encontraron webhooks relacionados')
    }
    console.log('')

    // 3. Verificar estado del usuario
    console.log('üìã PASO 3: Verificando perfil del usuario...')
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('user_id', USER_ID)
      .single()

    if (profileError) {
      console.log('‚ö†Ô∏è No se encontr√≥ perfil de usuario o error:', profileError.message)
    } else {
      console.log('‚úÖ Perfil de usuario encontrado:')
      console.log(`   üìß Email: ${profile.email}`)
      console.log(`   üîî Suscripci√≥n activa: ${profile.has_active_subscription}`)
      console.log(`   üìÖ √öltima actualizaci√≥n: ${profile.updated_at}`)
    }
    console.log('')

    // 4. Buscar otras suscripciones del usuario
    console.log('üìã PASO 4: Verificando otras suscripciones del usuario...')
    const { data: userSubs, error: userSubsError } = await supabase
      .from('unified_subscriptions')
      .select('id, status, subscription_type, created_at, mercadopago_subscription_id')
      .eq('user_id', USER_ID)
      .order('created_at', { ascending: false })

    if (userSubsError) {
      console.error('‚ùå Error obteniendo suscripciones del usuario:', userSubsError)
    } else {
      console.log(`‚úÖ Usuario tiene ${userSubs.length} suscripciones:`)
      userSubs.forEach((sub, index) => {
        const isCurrentSub = sub.id === SUBSCRIPTION_ID
        console.log(`   ${index + 1}. ID ${sub.id} - ${sub.status} - ${sub.subscription_type} - ${sub.created_at}${isCurrentSub ? ' ‚Üê ACTUAL' : ''}`)
      })
    }
    console.log('')

    // 5. An√°lisis de problemas potenciales
    console.log('üìã PASO 5: An√°lisis de problemas...')
    const issues = []
    
    if (subscription.status === 'pending') {
      issues.push('‚ùå Suscripci√≥n en estado pending - no activada')
    }
    
    if (!subscription.mercadopago_subscription_id) {
      issues.push('‚ùå Sin mercadopago_subscription_id - no sincronizada con MercadoPago')
    }
    
    if (!subscription.last_sync_at) {
      issues.push('‚ùå Sin last_sync_at - nunca sincronizada')
    }

    const timeSinceCreation = Date.now() - new Date(subscription.created_at).getTime()
    const minutesSinceCreation = Math.floor(timeSinceCreation / (1000 * 60))
    
    if (minutesSinceCreation > 5) {
      issues.push(`‚ö†Ô∏è Suscripci√≥n creada hace ${minutesSinceCreation} minutos - deber√≠a haberse activado`)
    }

    if (issues.length > 0) {
      console.log('üö® PROBLEMAS IDENTIFICADOS:')
      issues.forEach(issue => console.log(`   ${issue}`))
    } else {
      console.log('‚úÖ No se identificaron problemas obvios')
    }
    console.log('')

    // 6. Recomendaciones
    console.log('üí° RECOMENDACIONES:')
    if (subscription.status === 'pending' && !subscription.mercadopago_subscription_id) {
      console.log('   1. üîÑ Ejecutar sincronizaci√≥n con MercadoPago')
      console.log('   2. üìû Verificar estado real en MercadoPago API')
      console.log('   3. üîß Activar manualmente si est√° autorizada en MercadoPago')
    }
    
    if (minutesSinceCreation > 10) {
      console.log('   4. ‚ö° Activaci√≥n urgente requerida - usuario esperando')
    }

    console.log('')
    console.log('================================================================================')
    console.log('üèÅ Investigaci√≥n completada')
    console.log('================================================================================')

    return {
      subscription,
      issues,
      needsActivation: subscription.status === 'pending',
      minutesSinceCreation
    }

  } catch (error) {
    console.error('‚ùå Error durante la investigaci√≥n:', error)
    throw error
  }
}

// Ejecutar investigaci√≥n
if (require.main === module) {
  investigateSubscription142()
    .then(result => {
      if (result?.needsActivation) {
        console.log('\nüö® ACCI√ìN REQUERIDA: La suscripci√≥n necesita activaci√≥n inmediata')
        process.exit(1)
      } else {
        console.log('\n‚úÖ Investigaci√≥n completada exitosamente')
        process.exit(0)
      }
    })
    .catch(error => {
      console.error('\n‚ùå Error en la investigaci√≥n:', error)
      process.exit(1)
    })
}

module.exports = { investigateSubscription142 }