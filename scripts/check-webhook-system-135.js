const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://kwhubfkvpvrlawpylopc.supabase.co'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt3aHViZmt2cHZybGF3cHlsb3BjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NTkzOTU3MCwiZXhwIjoyMDYxNTE1NTcwfQ.3j4Gafz94NEixrTv55xAVmiemOKnIOdxsUBgqOvWGAI'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

// Datos de la suscripci√≥n ID 135
const SUBSCRIPTION_DATA = {
  id: 135,
  preapproval_id: '271804c66ace41499fe81348f35e184b',
  external_reference: 'SUB-2f4ec8c0-0e58-486d-9c11-a652368f7c19-73-bea44606',
  user_id: '2f4ec8c0-0e58-486d-9c11-a652368f7c19',
  email: 'cristoferscalante@gmail.com'
}

async function checkWebhookSystem() {
  console.log('üîç Verificando sistema de sincronizaci√≥n autom√°tica de webhooks')
  console.log('=' .repeat(70))
  
  try {
    // 1. Verificar configuraci√≥n del webhook endpoint
    console.log('\n1Ô∏è‚É£ Verificando endpoint de webhook...')
    
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://petgourmet.mx'
    const webhookUrl = `${baseUrl}/api/mercadopago/webhook`
    
    console.log(`   URL del webhook: ${webhookUrl}`)
    
    try {
      const response = await fetch(webhookUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      
      console.log(`   ‚úÖ Endpoint accesible (Status: ${response.status})`)
      
      if (response.ok) {
        const data = await response.json()
        console.log(`   üìã Respuesta: ${data.message || 'OK'}`)
      }
    } catch (error) {
      console.log(`   ‚ùå Error accediendo al endpoint: ${error.message}`)
    }
    
    // 2. Verificar configuraci√≥n de variables de entorno
    console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n de MercadoPago...')
    
    const mpToken = process.env.MERCADOPAGO_ACCESS_TOKEN
    const mpSecret = process.env.MERCADOPAGO_WEBHOOK_SECRET
    
    console.log(`   Token configurado: ${mpToken ? '‚úÖ S√≠' : '‚ùå No'}`)
    console.log(`   Secret configurado: ${mpSecret ? '‚úÖ S√≠' : '‚ùå No'}`)
    
    if (mpToken) {
      const tokenType = mpToken.startsWith('APP_USR') ? 'Producci√≥n' : 
                       mpToken.startsWith('TEST') ? 'Sandbox' : 'Desconocido'
      console.log(`   Tipo de token: ${tokenType}`)
    }
    
    // 3. Verificar estado actual de la suscripci√≥n
    console.log('\n3Ô∏è‚É£ Verificando estado actual de la suscripci√≥n...')
    
    const { data: subscription, error: subError } = await supabase
      .from('unified_subscriptions')
      .select('*')
      .eq('id', SUBSCRIPTION_DATA.id)
      .single()
    
    if (subError) {
      console.log(`   ‚ùå Error obteniendo suscripci√≥n: ${subError.message}`)
      return
    }
    
    console.log(`   üìã Estado actual: ${subscription.status}`)
    console.log(`   üìã MercadoPago ID: ${subscription.mercadopago_subscription_id || 'NULL'}`)
    console.log(`   üìã External Reference: ${subscription.external_reference}`)
    console.log(`   üìã √öltima sincronizaci√≥n: ${subscription.last_sync_at || 'Nunca'}`)
    
    // 4. Verificar webhooks recientes en la base de datos
    console.log('\n4Ô∏è‚É£ Verificando webhooks recientes...')
    
    const { data: recentWebhooks, error: webhookError } = await supabase
      .from('webhook_logs')
      .select('*')
      .gte('created_at', new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()) // √öltimos 7 d√≠as
      .order('created_at', { ascending: false })
      .limit(10)
    
    if (webhookError) {
      console.log(`   ‚ùå Error obteniendo webhooks: ${webhookError.message}`)
    } else {
      console.log(`   üìä Webhooks recientes (7 d√≠as): ${recentWebhooks.length}`)
      
      if (recentWebhooks.length > 0) {
        console.log('   üìã √öltimos webhooks:')
        recentWebhooks.slice(0, 5).forEach((webhook, index) => {
          console.log(`      ${index + 1}. ${webhook.webhook_type} - ${webhook.status} (${new Date(webhook.created_at).toLocaleString()})`)
        })
      } else {
        console.log('   ‚ö†Ô∏è No se encontraron webhooks recientes')
      }
    }
    
    // 5. Verificar webhooks espec√≠ficos para esta suscripci√≥n
    console.log('\n5Ô∏è‚É£ Verificando webhooks para suscripci√≥n ID 135...')
    
    const { data: subscriptionWebhooks, error: subWebhookError } = await supabase
      .from('webhook_logs')
      .select('*')
      .or(`external_reference.eq.${SUBSCRIPTION_DATA.external_reference},preapproval_id.eq.${SUBSCRIPTION_DATA.preapproval_id}`)
      .order('created_at', { ascending: false })
    
    if (subWebhookError) {
      console.log(`   ‚ùå Error obteniendo webhooks de suscripci√≥n: ${subWebhookError.message}`)
    } else {
      console.log(`   üìä Webhooks para esta suscripci√≥n: ${subscriptionWebhooks.length}`)
      
      if (subscriptionWebhooks.length > 0) {
        console.log('   üìã Webhooks encontrados:')
        subscriptionWebhooks.forEach((webhook, index) => {
          console.log(`      ${index + 1}. ${webhook.webhook_type} - ${webhook.status} - ${webhook.action || 'N/A'} (${new Date(webhook.created_at).toLocaleString()})`)
        })
      } else {
        console.log('   ‚ùå No se encontraron webhooks para esta suscripci√≥n')
      }
    }
    
    // 6. Probar conectividad con MercadoPago API
    console.log('\n6Ô∏è‚É£ Probando conectividad con MercadoPago API...')
    
    if (mpToken) {
      try {
        const response = await fetch(`https://api.mercadopago.com/preapproval/${SUBSCRIPTION_DATA.preapproval_id}`, {
          headers: {
            'Authorization': `Bearer ${mpToken}`,
            'Content-Type': 'application/json'
          }
        })
        
        if (response.ok) {
          const data = await response.json()
          console.log(`   ‚úÖ API accesible - Estado: ${data.status}`)
          console.log(`   üìã Pr√≥ximo pago: ${data.next_payment_date || 'N/A'}`)
        } else {
          console.log(`   ‚ùå Error API: ${response.status} - ${response.statusText}`)
        }
      } catch (error) {
        console.log(`   ‚ùå Error conectando con API: ${error.message}`)
      }
    } else {
      console.log('   ‚ö†Ô∏è No se puede probar API sin token')
    }
    
    // 7. Diagn√≥stico y recomendaciones
    console.log('\n7Ô∏è‚É£ Diagn√≥stico del sistema de webhooks')
    console.log('-' .repeat(50))
    
    const issues = []
    const recommendations = []
    
    // Verificar si la suscripci√≥n ya est√° activa
    if (subscription.status === 'active') {
      console.log('‚úÖ ESTADO: La suscripci√≥n ya est√° activa')
      console.log('   No se requiere acci√≥n adicional')
    } else {
      console.log('‚ö†Ô∏è ESTADO: La suscripci√≥n sigue pendiente')
      
      // Verificar si hay webhooks
      if (subscriptionWebhooks.length === 0) {
        issues.push('No se han recibido webhooks para esta suscripci√≥n')
        recommendations.push('Verificar configuraci√≥n de webhooks en MercadoPago')
        recommendations.push('Revisar logs del servidor web')
        recommendations.push('Probar webhook manualmente')
      } else {
        issues.push('Se recibieron webhooks pero no activaron la suscripci√≥n')
        recommendations.push('Revisar logs de procesamiento de webhooks')
        recommendations.push('Verificar l√≥gica de activaci√≥n autom√°tica')
      }
      
      // Verificar configuraci√≥n
      if (!mpToken) {
        issues.push('Token de MercadoPago no configurado')
        recommendations.push('Configurar MERCADOPAGO_ACCESS_TOKEN')
      }
      
      if (!mpSecret) {
        issues.push('Secret de webhook no configurado')
        recommendations.push('Configurar MERCADOPAGO_WEBHOOK_SECRET')
      }
    }
    
    // Mostrar diagn√≥stico
    if (issues.length > 0) {
      console.log('\n‚ùå PROBLEMAS IDENTIFICADOS:')
      issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`)
      })
    }
    
    if (recommendations.length > 0) {
      console.log('\nüí° RECOMENDACIONES:')
      recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`)
      })
    }
    
    if (issues.length === 0) {
      console.log('\n‚úÖ SISTEMA FUNCIONANDO CORRECTAMENTE')
      console.log('   No se detectaron problemas en el sistema de webhooks')
    }
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message)
  }
}

// Ejecutar verificaci√≥n
checkWebhookSystem().then(() => {
  console.log('\n‚úÖ Verificaci√≥n del sistema de webhooks completada')
  process.exit(0)
}).catch(error => {
  console.error('‚ùå Error ejecutando verificaci√≥n:', error.message)
  process.exit(1)
})