/**
 * VERIFICACI√ìN DE ESQUEMA DE SUSCRIPCIONES
 * 
 * Script para verificar la estructura de la tabla unified_subscriptions
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config()

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

async function checkSubscriptionSchema() {
  console.log('üîç Verificando estructura de la tabla unified_subscriptions...')
  
  try {
    // Obtener una suscripci√≥n de ejemplo para ver todas las columnas
    const { data: sampleSubscription, error } = await supabase
      .from('unified_subscriptions')
      .select('*')
      .limit(1)
      .single()
    
    if (error) {
      console.error('‚ùå Error obteniendo muestra:', error)
      return
    }
    
    console.log('‚úÖ Columnas disponibles en unified_subscriptions:')
    console.log(Object.keys(sampleSubscription).sort())
    
    console.log('\nüìã Estructura completa de una suscripci√≥n:')
    console.log(JSON.stringify(sampleSubscription, null, 2))
    
    // Tambi√©n verificar la suscripci√≥n espec√≠fica que queremos activar
    console.log('\nüéØ Verificando suscripci√≥n pendiente (ID 117):')
    const { data: targetSubscription, error: targetError } = await supabase
      .from('unified_subscriptions')
      .select('*')
      .eq('id', 117)
      .single()
    
    if (targetError) {
      console.error('‚ùå Error obteniendo suscripci√≥n 117:', targetError)
      return
    }
    
    console.log('‚úÖ Suscripci√≥n 117 encontrada:')
    console.log(JSON.stringify(targetSubscription, null, 2))
    
  } catch (error) {
    console.error('‚ùå Error fatal:', error)
  }
}

checkSubscriptionSchema()