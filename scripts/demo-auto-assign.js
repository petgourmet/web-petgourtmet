// Script de demostraci√≥n del sistema de auto-asignaci√≥n de √≥rdenes
// Este script muestra c√≥mo funciona la auto-asignaci√≥n autom√°tica

require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

// Configuraci√≥n
const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

// Colores para logs
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

// Funci√≥n para demostrar el sistema completo
async function demonstrateAutoAssign() {
  try {
    log('\nüéØ === DEMOSTRACI√ìN DEL SISTEMA DE AUTO-ASIGNACI√ìN ===', 'cyan')
    log('Este sistema asocia autom√°ticamente las √≥rdenes con usuarios bas√°ndose en el email', 'blue')
    
    // Paso 1: Mostrar estad√≠sticas actuales
    log('\nüìä ESTAD√çSTICAS ACTUALES', 'yellow')
    const statsResponse = await fetch(`${BASE_URL}/api/orders/auto-assign`)
    
    if (statsResponse.ok) {
      const stats = await statsResponse.json()
      log(`‚úÖ √ìrdenes sin user_id: ${stats.data.ordersWithoutUserId || 0}`, 'green')
      
      if (stats.data.sampleOrders && stats.data.sampleOrders.length > 0) {
        log('\nüìã Ejemplos de √≥rdenes sin user_id:', 'blue')
        stats.data.sampleOrders.slice(0, 3).forEach(order => {
          const shippingData = JSON.parse(order.shipping_address)
          const email = shippingData.customer_data?.email || 'Sin email'
          log(`  ‚Ä¢ Orden ${order.id}: ${order.customer_name} (${email})`, 'blue')
        })
      }
    }
    
    // Paso 2: Ejecutar auto-asignaci√≥n en todas las √≥rdenes
    log('\nüîÑ EJECUTANDO AUTO-ASIGNACI√ìN EN TODAS LAS √ìRDENES', 'yellow')
    const processResponse = await fetch(`${BASE_URL}/api/orders/auto-assign`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ processAll: true })
    })
    
    if (processResponse.ok) {
      const result = await processResponse.json()
      log(`‚úÖ Procesamiento completado:`, 'green')
      log(`  ‚Ä¢ √ìrdenes procesadas: ${result.data.processed}`, 'green')
      log(`  ‚Ä¢ √ìrdenes asignadas exitosamente: ${result.data.successful}`, 'green')
      log(`  ‚Ä¢ √ìrdenes que no se pudieron asignar: ${result.data.failed}`, 'blue')
      
      if (result.data.details && result.data.details.length > 0) {
        log('\nüìù DETALLES DEL PROCESAMIENTO:', 'blue')
        result.data.details.forEach(detail => {
          const status = detail.success ? '‚úÖ' : '‚ùå'
          const color = detail.success ? 'green' : 'yellow'
          log(`  ${status} Orden ${detail.orderId}: ${detail.message}`, color)
        })
      }
    }
    
    // Paso 3: Mostrar estad√≠sticas finales
    log('\nüìä ESTAD√çSTICAS FINALES', 'yellow')
    const finalStatsResponse = await fetch(`${BASE_URL}/api/orders/auto-assign`)
    
    if (finalStatsResponse.ok) {
      const finalStats = await finalStatsResponse.json()
      log(`‚úÖ √ìrdenes sin user_id restantes: ${finalStats.data.ordersWithoutUserId || 0}`, 'green')
    }
    
    // Paso 4: Explicar c√≥mo funciona la integraci√≥n autom√°tica
    log('\nüîß C√ìMO FUNCIONA LA INTEGRACI√ìN AUTOM√ÅTICA:', 'cyan')
    log('1. Cuando se crea una nueva orden en /api/mercadopago/create-preference', 'blue')
    log('2. El sistema autom√°ticamente llama al endpoint /api/orders/auto-assign', 'blue')
    log('3. Se extrae el email del shipping_address de la orden', 'blue')
    log('4. Se busca un usuario con ese email en la base de datos', 'blue')
    log('5. Si se encuentra, se asigna el user_id a la orden', 'blue')
    log('6. El usuario puede ver su compra en su perfil inmediatamente', 'blue')
    
    log('\n‚ú® BENEFICIOS:', 'cyan')
    log('‚Ä¢ Los usuarios ven sus compras autom√°ticamente en su perfil', 'green')
    log('‚Ä¢ No se requiere intervenci√≥n manual', 'green')
    log('‚Ä¢ Funciona tanto para usuarios registrados como invitados', 'green')
    log('‚Ä¢ El proceso es transparente y no afecta la experiencia de compra', 'green')
    
    log('\nüéâ === DEMOSTRACI√ìN COMPLETADA ===', 'cyan')
    
  } catch (error) {
    log(`‚ùå Error en la demostraci√≥n: ${error.message}`, 'red')
    console.error(error)
  }
}

// Funci√≥n para mostrar el estado del sistema
async function showSystemStatus() {
  try {
    log('\nüîç === ESTADO DEL SISTEMA ===', 'cyan')
    
    // Verificar conectividad
    log('\nüåê Verificando conectividad...', 'yellow')
    const healthCheck = await fetch(`${BASE_URL}/api/orders/auto-assign`)
    
    if (healthCheck.ok) {
      log('‚úÖ Servidor respondiendo correctamente', 'green')
      log('‚úÖ Endpoint de auto-asignaci√≥n funcionando', 'green')
    } else {
      log('‚ùå Problema con el servidor', 'red')
      return
    }
    
    // Verificar base de datos
    log('\nüóÑÔ∏è Verificando base de datos...', 'yellow')
    const { data: orders, error } = await supabase
      .from('orders')
      .select('id, user_id, customer_name')
      .limit(1)
    
    if (error) {
      log(`‚ùå Error conectando a la base de datos: ${error.message}`, 'red')
    } else {
      log('‚úÖ Conexi√≥n a base de datos exitosa', 'green')
    }
    
    // Mostrar configuraci√≥n
    log('\n‚öôÔ∏è Configuraci√≥n:', 'yellow')
    log(`‚Ä¢ URL base: ${BASE_URL}`, 'blue')
    log(`‚Ä¢ Supabase URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configurado' : '‚ùå No configurado'}`, 'blue')
    log(`‚Ä¢ Service Role Key: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Configurado' : '‚ùå No configurado'}`, 'blue')
    
  } catch (error) {
    log(`‚ùå Error verificando el sistema: ${error.message}`, 'red')
    console.error(error)
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2)
  
  if (args.includes('--status')) {
    await showSystemStatus()
  } else {
    await showSystemStatus()
    await demonstrateAutoAssign()
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error)
}

module.exports = {
  demonstrateAutoAssign,
  showSystemStatus
}